{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DeepNone Safe, simple access to optional nested attributes Install from PyPI pip install deepnone How Wrap untrusted value in dn() , transform it, then get it. If any transform step fails, it will return None . Otherwise, you'll get the transformed value from get . how.py ( dn ( untrusted_value ) . some_attribute [ 4 ] . fn ( json . loads )[ 3 ] . upper () . get ) Why Let's write a function to uppercase the name of the first batter in a JSON string. If there's any failures in data extraction, we just want to return None . With dn with_dn.py def first_batter_name_upper ( value : str ) -> str : return dn ( value ) . fn ( json . loads )[ 'batters' ][ 0 ] . upper () . get Without dn 99% of the code is error-checking to handle unexpected input. without_dn.py def first_batter_name_upper ( input_string : str ) -> str : try : value = json . loads ( input_string ) except : return if not isinstance ( value , dict ): return if 'batters' not in value : return batters = value [ 'batters' ] if not isinstance ( batters , list ): return if len ( batters ) < 1 : return batter = batters [ 0 ] if not isinstance ( batter , dict ): return if 'name' not in batter : return name = batter [ 'name' ] if not isinstance ( name , str ): return return name . upper () Tour usage.py from deepnone import dn def test_deepnone (): assert dn ( 1 ) . get == 1 assert dn ( \"ASDF\" ) . lower () . get == \"asdf\" assert dn ( 123 ) . lower () . get is None assert dn ( 123 ) . lower () . default ( \"hi\" ) == \"hi\" assert dn ( \"ASDF\" ) . strip ( \"F\" ) . get == \"ASD\" assert dn ( \"\" ) . junk () . get is None assert dn ( 3 ) . real . get == 3 assert dn ({ \"asdf\" : [ \"a\" , \"b\" , \"c\" ]})[ \"asdf\" ][ 1 ] . get == \"b\" assert dn ({ \"asdf\" : [ \"a\" , \"b\" , \"c\" ]})[ \"asdf\" ][ 1 ] . upper () . get == \"B\" assert dn ({ \"asdf\" : [ \"a\" , \"b\" , \"c\" ]})[ \"fdas\" ][ 1 ] . upper () . get is None assert dn ( 3 ) . fn ( str ) . get == \"3\" assert dn ({ \"a\" : \"b\" }) . attr ( \"get\" )( \"a\" ) . get == \"b\" assert dn ( 123 ) . junk . fn ( str ) . get is None assert dn ( 123 ) . fn ( str ) assert not dn ( 123 ) . fn ( str ) . junk assert bool ( dn ( 123 ) . fn ( str )) assert not bool ( dn ( 123 ) . fn ( str ) . junk . asdf ) assert list ( dn ( 1 ) . junk ) == [] for x in dn ({ \"x\" : [ 3 ]})[ \"x\" ]: assert x == 3 assert not any ( dn ( \"a\" ) . junk ) assert any ( dn ([ 1 ])) assert dn ( \"a\" ) == \"a\" assert \"a\" == dn ( \"a\" ) assert dn ( \"a\" ) . upper () == \"A\" Actions Access item x[y] assert ds ({ 'x' : 3 })[ 'x' ] . get == 3 Get attribute x.myfield assert ds ( fraction ( 5 , 8 )) . numerator . get == 5 Call method x.upper() assert ds ( 'asdf' ) . upper () == 'ASDF' Transform double_number(x) assert ds ( 4 ) . fn ( double_number ) . get == 8 Iterable coercion assert len (( x for x in ds ( 'a' ) . bad_attr )) == 0 assert [ x * 2 for x in ds ({ 'x' : [ 3 , 4 , 5 ]}) . x ] == [ 6 , 8 , 10 ] Truthiness Directly assert the bool value of dn assert not dn ( 234 ) . junk Equality Compare dn directly against its built value. assert dn ( 'asdf' ) . upper () == 'ASDF'","title":"DeepNone"},{"location":"#deepnone","text":"Safe, simple access to optional nested attributes","title":"DeepNone"},{"location":"#install-from-pypi","text":"pip install deepnone","title":"Install from PyPI"},{"location":"#how","text":"Wrap untrusted value in dn() , transform it, then get it. If any transform step fails, it will return None . Otherwise, you'll get the transformed value from get . how.py ( dn ( untrusted_value ) . some_attribute [ 4 ] . fn ( json . loads )[ 3 ] . upper () . get )","title":"How"},{"location":"#why","text":"Let's write a function to uppercase the name of the first batter in a JSON string. If there's any failures in data extraction, we just want to return None .","title":"Why"},{"location":"#with-dn","text":"with_dn.py def first_batter_name_upper ( value : str ) -> str : return dn ( value ) . fn ( json . loads )[ 'batters' ][ 0 ] . upper () . get","title":"With dn"},{"location":"#without-dn","text":"99% of the code is error-checking to handle unexpected input. without_dn.py def first_batter_name_upper ( input_string : str ) -> str : try : value = json . loads ( input_string ) except : return if not isinstance ( value , dict ): return if 'batters' not in value : return batters = value [ 'batters' ] if not isinstance ( batters , list ): return if len ( batters ) < 1 : return batter = batters [ 0 ] if not isinstance ( batter , dict ): return if 'name' not in batter : return name = batter [ 'name' ] if not isinstance ( name , str ): return return name . upper ()","title":"Without dn"},{"location":"#tour","text":"usage.py from deepnone import dn def test_deepnone (): assert dn ( 1 ) . get == 1 assert dn ( \"ASDF\" ) . lower () . get == \"asdf\" assert dn ( 123 ) . lower () . get is None assert dn ( 123 ) . lower () . default ( \"hi\" ) == \"hi\" assert dn ( \"ASDF\" ) . strip ( \"F\" ) . get == \"ASD\" assert dn ( \"\" ) . junk () . get is None assert dn ( 3 ) . real . get == 3 assert dn ({ \"asdf\" : [ \"a\" , \"b\" , \"c\" ]})[ \"asdf\" ][ 1 ] . get == \"b\" assert dn ({ \"asdf\" : [ \"a\" , \"b\" , \"c\" ]})[ \"asdf\" ][ 1 ] . upper () . get == \"B\" assert dn ({ \"asdf\" : [ \"a\" , \"b\" , \"c\" ]})[ \"fdas\" ][ 1 ] . upper () . get is None assert dn ( 3 ) . fn ( str ) . get == \"3\" assert dn ({ \"a\" : \"b\" }) . attr ( \"get\" )( \"a\" ) . get == \"b\" assert dn ( 123 ) . junk . fn ( str ) . get is None assert dn ( 123 ) . fn ( str ) assert not dn ( 123 ) . fn ( str ) . junk assert bool ( dn ( 123 ) . fn ( str )) assert not bool ( dn ( 123 ) . fn ( str ) . junk . asdf ) assert list ( dn ( 1 ) . junk ) == [] for x in dn ({ \"x\" : [ 3 ]})[ \"x\" ]: assert x == 3 assert not any ( dn ( \"a\" ) . junk ) assert any ( dn ([ 1 ])) assert dn ( \"a\" ) == \"a\" assert \"a\" == dn ( \"a\" ) assert dn ( \"a\" ) . upper () == \"A\"","title":"Tour"},{"location":"#actions","text":"","title":"Actions"},{"location":"#access-item-xy","text":"assert ds ({ 'x' : 3 })[ 'x' ] . get == 3","title":"Access item x[y]"},{"location":"#get-attribute-xmyfield","text":"assert ds ( fraction ( 5 , 8 )) . numerator . get == 5","title":"Get attribute x.myfield"},{"location":"#call-method-xupper","text":"assert ds ( 'asdf' ) . upper () == 'ASDF'","title":"Call method x.upper()"},{"location":"#transform-double_numberx","text":"assert ds ( 4 ) . fn ( double_number ) . get == 8","title":"Transform double_number(x)"},{"location":"#iterable-coercion","text":"assert len (( x for x in ds ( 'a' ) . bad_attr )) == 0 assert [ x * 2 for x in ds ({ 'x' : [ 3 , 4 , 5 ]}) . x ] == [ 6 , 8 , 10 ]","title":"Iterable coercion"},{"location":"#truthiness","text":"Directly assert the bool value of dn assert not dn ( 234 ) . junk","title":"Truthiness"},{"location":"#equality","text":"Compare dn directly against its built value. assert dn ( 'asdf' ) . upper () == 'ASDF'","title":"Equality"}]}